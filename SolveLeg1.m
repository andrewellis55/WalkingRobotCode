%This File Solves all the The linkages in Leg 1 using varioius solve
%function that we programmed. If statements are use throughout for
%debugging purposes

%1st Leg
%Solve for ground Link
groundBx = LegStartX(1) + FixBx;
groundBy = LegStartY(1) + FixBy;

if 1==1
    %Solving First FourBar Linkage
    [Leg(1).Link(1).Pos(A).Cor(X).Rev(T), ...
        Leg(1).Link(1).Pos(A).Cor(Y).Rev(T), ...
        Leg(1).Link(1).Pos(B).Cor(X).Rev(T), ...
        Leg(1).Link(1).Pos(B).Cor(Y).Rev(T),...
        Leg(1).Link(2).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(2).Pos(A).Cor(Y).Rev(T),...
        Leg(1).Link(2).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(2).Pos(B).Cor(Y).Rev(T),...
        Leg(1).Link(3).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(3).Pos(A).Cor(Y).Rev(T),...
        Leg(1).Link(3).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(3).Pos(B).Cor(Y).Rev(T)] = ...
        CrankRockerSolve( LegStartX(1),       LegStartY(1), ...
        groundBx,   groundBy, ...
        FixedPointDist, LinkLength(1), ...
        LinkLength(2),  LinkLength(3), T, Norm, Norm, W);
    
    %Velocity analysis for Loop 1
    if VelAnalysis == 1
        [Leg(1).Joint(C).Vx.Rev(T), Leg(1).Joint(C).Vy.Rev(T), ...
            Leg(1).Joint(D).Vx.Rev(T), Leg(1).Joint(D).Vy.Rev(T)] = ...
            CrankRockerVelocity( LegStartX(1),       LegStartY(1), ...
            groundBx,   groundBy, ...
            FixedPointDist, LinkLength(1), ...
            LinkLength(2),  LinkLength(3), T, Norm, Norm, W);
    end
    
end

if 1 == 1
    %Solving Second FourBar Linkage
    [Temp5, Temp6, Temp7, Temp8, ...
        Leg(1).Link(4).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(4).Pos(A).Cor(Y).Rev(T),...
        Leg(1).Link(4).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(4).Pos(B).Cor(Y).Rev(T),...
        Leg(1).Link(5).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(5).Pos(A).Cor(Y).Rev(T),...
        Leg(1).Link(5).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(5).Pos(B).Cor(Y).Rev(T)] = ...
        CrankRockerSolve( LegStartX(1),       LegStartY(1), ...
        groundBx,   groundBy, ...
        FixedPointDist, LinkLength(1), ...
        LinkLength(4),  LinkLength(5), T, FlipX, Norm, W);
    
    %Velocity analysis for Loop 2
    if VelAnalysis == 1
        [Temp1, Temp2, ...
            Leg(1).Joint(G).Vx.Rev(T), Leg(1).Joint(G).Vy.Rev(T)] = ...
            CrankRockerVelocity( LegStartX(1),       LegStartY(1), ...
            groundBx,   groundBy, ...
            FixedPointDist, LinkLength(1), ...
            LinkLength(2),  LinkLength(3), T-20, Norm, Norm, W);
    end
end




if 3==3
    %Solve First 3 Bar
    [Temp1, Temp2, Temp3, Temp4, ...
        Leg(1).Link(7).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(7).Pos(A).Cor(Y).Rev(T),...
        Leg(1).Link(7).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(7).Pos(B).Cor(Y).Rev(T),...
        Leg(1).Link(6).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(6).Pos(A).Cor(Y).Rev(T),...
        Leg(1).Link(6).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(6).Pos(B).Cor(Y).Rev(T)] ...
        = ThreeBarSolve(Leg(1).Link(3).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(3).Pos(B).Cor(Y).Rev(T),...
        Leg(1).Link(3).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(3).Pos(A).Cor(Y).Rev(T),...
        LinkLength(3), LinkLength(7), LinkLength(6));
    
    
    if VelAnalysis == 1
        %Velocity At 3 Bar
        RotationAngle = -86.268;
        R = [cosd(RotationAngle), -sind(RotationAngle); ...
            sind(RotationAngle), cosd(RotationAngle)];
        V_G = [Leg(1).Joint(D).Vx.Rev(T), Leg(1).Joint(D).Vy.Rev(T)] * R;
        Leg(1).Joint(E).Vx.Rev(T)=V_G(1);
        Leg(1).Joint(E).Vy.Rev(T)=V_G(2);
    end
    
end

if 4==4
    %Solving Third FourBar Linkage Using MultiDependancy Solver
    %(uses cordinates from input plus moving frame)
    %Solves for input angle using dot product
    [Temp1, Temp2, Temp3, Temp4, ...
        Temp5, Temp6, Temp7, Temp8, ...
        Leg(1).Link(9).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(9).Pos(A).Cor(Y).Rev(T),...
        Leg(1).Link(9).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(9).Pos(B).Cor(Y).Rev(T),...
        Leg(1).Link(8).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(8).Pos(A).Cor(Y).Rev(T),...
        Leg(1).Link(8).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(8).Pos(B).Cor(Y).Rev(T)] = ...
        MultiDependancyFourBarSolve( Leg(1).Link(6).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(6).Pos(A).Cor(Y).Rev(T), ...
        Leg(1).Link(6).Pos(B).Cor(X).Rev(T), ...
        Leg(1).Link(6).Pos(B).Cor(Y).Rev(T), ...
        Leg(1).Link(5).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(5).Pos(B).Cor(Y).Rev(T), ...
        Leg(1).Link(5).Pos(A).Cor(X).Rev(T), ...
        Leg(1).Link(5).Pos(A).Cor(Y).Rev(T), ...
        LinkLength(6), LinkLength(5), ...
        LinkLength(9),  LinkLength(8), Norm, Norm);
end


if 5==5
    
    %Solve Seconde 3 Bar
    [Temp1, Temp2, Temp3, Temp4, ...
        Leg(1).Link(10).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(10).Pos(A).Cor(Y).Rev(T),...
        Leg(1).Link(10).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(10).Pos(B).Cor(Y).Rev(T),...
        Leg(1).Link(11).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(11).Pos(A).Cor(Y).Rev(T),...
        Leg(1).Link(11).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(11).Pos(B).Cor(Y).Rev(T)] ...
        = ThreeBarSolve(Leg(1).Link(9).Pos(B).Cor(X).Rev(T),...
        Leg(1).Link(9).Pos(B).Cor(Y).Rev(T),...
        Leg(1).Link(9).Pos(A).Cor(X).Rev(T),...
        Leg(1).Link(9).Pos(A).Cor(Y).Rev(T),...
        LinkLength(9), LinkLength(10), LinkLength(11));
end
%Velocity analysis for the end-effector of the robot
if VelAnalysis == 1
    Rise = real(Leg(1).Link(9).Pos(A).Cor(Y).Rev(T) - Leg(1).Link(9).Pos(B).Cor(Y).Rev(T));
    Run = real(Leg(1).Link(9).Pos(B).Cor(X).Rev(T) - Leg(1).Link(9).Pos(A).Cor(X).Rev(T));
    RotationAngle = atan2d(Rise,-1* Run);
    R = [cosd(RotationAngle), -sind(RotationAngle); ...
        sind(RotationAngle), cosd(RotationAngle)];
    V_G = [Leg(1).Joint(G).Vx.Rev(T), Leg(1).Joint(G).Vy.Rev(T)] * R;
    Leg(1).Joint(H).Vx.Rev(T)=V_G(1);
    Leg(1).Joint(H).Vy.Rev(T)=V_G(2);
end

